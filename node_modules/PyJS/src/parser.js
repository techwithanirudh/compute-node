/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,37],$Va=[1,47],$Vb=[1,35],$Vc=[1,38],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,48],$Vm=[1,27],$Vn=[1,21],$Vo=[1,22],$Vp=[1,23],$Vq=[1,24],$Vr=[1,14,15,18,19,22,27,41,42,47,50,55,57,60,61,62,63,64,65,66,67,68,70,87,95,98,99,100,103],$Vs=[7,8],$Vt=[7,8,22,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,54,55],$Vu=[2,47],$Vv=[1,60],$Vw=[7,8,51,56,59,71,73],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[1,93],$VQ=[1,94],$VR=[1,95],$VS=[1,96],$VT=[7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,51,54,55,56,59,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$VU=[1,100],$VV=[1,97],$VW=[1,98],$VX=[7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,51,54,55,56,59,71,73],$VY=[50,54,55],$VZ=[2,13],$V_=[7,8,22,23,25,26,51,56,59,71,73],$V$=[7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,51,56,59,71,73],$V01=[1,167],$V11=[2,73],$V21=[59,71],$V31=[1,174],$V41=[7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,51,56,59,71,73],$V51=[7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,51,56,59,71,73],$V61=[1,186],$V71=[51,59],$V81=[1,14,15,18,19,22,23,27,41,42,47,50,55,57,60,61,62,63,64,65,66,67,68,70,87,95,97,98,99,100,103];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file_input":3,"statements":4,"statement":5,"stmt_list":6,"NEWLINE":7,";":8,"compound_stmt":9,"simple_stmt":10,"expression_stmt":11,"assignment_stmt":12,"augmented_assignment_stmt":13,"PASS":14,"DEL":15,"target":16,"return_stmt":17,"BREAK":18,"CONTINUE":19,"expression":20,"expr":21,"IF":22,"ELSE":23,"primary":24,"OR":25,"AND":26,"NOT":27,"IS":28,"IN":29,"==":30,"!=":31,"<":32,">":33,"<=":34,">=":35,"|":36,"^":37,"&":38,"<<":39,">>":40,"+":41,"-":42,"*":43,"/":44,"//":45,"%":46,"~":47,"**":48,"literal":49,"(":50,")":51,"argument_list_enclosure":52,"identifier":53,".":54,"[":55,"]":56,"IDENTIFIER":57,"argument_list":58,",":59,"STRING_LITERAL":60,"FLOAT":61,"DEC_INTEGER":62,"BIN_INTEGER":63,"OCT_INTEGER":64,"HEX_INTEGER":65,"TRUE":66,"FALSE":67,"NONE":68,"expression_list":69,"{":70,"}":71,"key_datum_list":72,":":73,"=":74,"+=":75,"-=":76,"*=":77,"/=":78,"//=":79,"%=":80,"**=":81,"<<=":82,">>=":83,"&=":84,"^=":85,"|=":86,"RETURN":87,"if_stmt":88,"while_stmt":89,"for_stmt":90,"funcdef":91,"classdef":92,"suite":93,"INDENT":94,"DEDENT":95,"elif_suite":96,"ELIF":97,"WHILE":98,"FOR":99,"DEF":100,"parameter_list_enclosure":101,"parameter_list":102,"CLASS":103,"$accept":0,"$end":1},
terminals_: {2:"error",7:"NEWLINE",8:";",14:"PASS",15:"DEL",18:"BREAK",19:"CONTINUE",22:"IF",23:"ELSE",25:"OR",26:"AND",27:"NOT",28:"IS",29:"IN",30:"==",31:"!=",32:"<",33:">",34:"<=",35:">=",36:"|",37:"^",38:"&",39:"<<",40:">>",41:"+",42:"-",43:"*",44:"/",45:"//",46:"%",47:"~",48:"**",50:"(",51:")",54:".",55:"[",56:"]",57:"IDENTIFIER",59:",",60:"STRING_LITERAL",61:"FLOAT",62:"DEC_INTEGER",63:"BIN_INTEGER",64:"OCT_INTEGER",65:"HEX_INTEGER",66:"TRUE",67:"FALSE",68:"NONE",70:"{",71:"}",73:":",74:"=",75:"+=",76:"-=",77:"*=",78:"/=",79:"//=",80:"%=",81:"**=",82:"<<=",83:">>=",84:"&=",85:"^=",86:"|=",87:"RETURN",94:"INDENT",95:"DEDENT",97:"ELIF",98:"WHILE",99:"FOR",100:"DEF",103:"CLASS"},
productions_: [0,[3,1],[4,1],[4,2],[5,2],[5,3],[5,1],[6,1],[6,3],[10,1],[10,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[11,1],[20,1],[20,5],[21,1],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,2],[21,2],[21,3],[24,1],[24,1],[24,3],[24,2],[16,1],[16,3],[16,4],[53,1],[52,2],[52,3],[58,1],[58,3],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,3],[49,2],[49,3],[49,3],[49,2],[69,1],[69,3],[72,3],[72,5],[12,3],[12,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[17,1],[17,2],[9,1],[9,1],[9,1],[9,1],[9,1],[93,2],[93,4],[88,4],[88,7],[88,5],[88,8],[96,4],[96,5],[89,4],[89,7],[90,6],[90,9],[91,5],[101,2],[101,3],[102,1],[102,3],[92,4],[92,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 exports.ast = $$[$0]; 
break;
case 3:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 6: case 7: case 57: case 73: case 113:
 this.$ = [$$[$0]]; 
break;
case 8: case 58: case 74: case 114:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 12:
 this.$ = ['pass']; 
break;
case 13:
 this.$ = ['del', $$[$0]]; 
break;
case 15:
 this.$ = ['break']; 
break;
case 16:
 this.$ = ['continue']; 
break;
case 19:
 this.$ = ['conditional', ['truth', $$[$0-2]], $$[$0-4], $$[$0]]; 
break;
case 21:
 this.$ = ['or', ['truth', $$[$0-2]], ['truth', $$[$0]]]; 
break;
case 22:
 this.$ = ['and', ['truth', $$[$0-2]], ['truth', $$[$0]]]; 
break;
case 23:
 this.$ = ['not', ['truth', $$[$0]]]; 
break;
case 24:
 this.$ = ['is', $$[$0-2], $$[$0]]; 
break;
case 25:
 this.$ = call($$[$0], '__contains__', [$$[$0-2]]); 
break;
case 26:
 this.$ = call($$[$0-2], '__eq__', [$$[$0]]); 
break;
case 27:
 this.$ = call($$[$0-2], '__ne__', [$$[$0]]); 
break;
case 28:
 this.$ = call($$[$0-2], '__lt__', [$$[$0]]); 
break;
case 29:
 this.$ = call($$[$0-2], '__gt__', [$$[$0]]); 
break;
case 30:
 this.$ = call($$[$0-2], '__le__', [$$[$0]]); 
break;
case 31:
 this.$ = call($$[$0-2], '__ge__', [$$[$0]]); 
break;
case 32:
 this.$ = call($$[$0-2], '__or__', [$$[$0]]); 
break;
case 33:
 this.$ = call($$[$0-2], '__xor__', [$$[$0]]); 
break;
case 34:
 this.$ = call($$[$0-2], '__and__', [$$[$0]]); 
break;
case 35:
 this.$ = call($$[$0-2], '__lshift__', [$$[$0]]); 
break;
case 36:
 this.$ = call($$[$0-2], '__rshift__', [$$[$0]]); 
break;
case 37:
 this.$ = call($$[$0-2], '__add__', [$$[$0]]); 
break;
case 38:
 this.$ = call($$[$0-2], '__sub__', [$$[$0]]); 
break;
case 39:
 this.$ = call($$[$0-2], '__mul__', [$$[$0]]); 
break;
case 40:
 this.$ = call($$[$0-2], '__truediv__', [$$[$0]]); 
break;
case 41:
 this.$ = call($$[$0-2], '__floordiv__', [$$[$0]]); 
break;
case 42:
 this.$ = call($$[$0-2], '__mod__', [$$[$0]]); 
break;
case 43:
 this.$ = call($$[$0], '__pos__', []); 
break;
case 44:
 this.$ = call($$[$0], '__neg__', []); 
break;
case 45:
 this.$ = call($$[$0], '__invert__', []); 
break;
case 46:
 this.$ = call($$[$0-2], '__pow__', [$$[$0]]); 
break;
case 47:
 this.$ = ['primary', $$[$0]]; 
break;
case 49: case 56: case 99: case 112:
 this.$ = $$[$0-1]; 
break;
case 50:
 this.$ = ['call', $$[$0-1], $$[$0]]; 
break;
case 52:
 this.$ = ['attributeref', $$[$0-2], $$[$0]]; 
break;
case 53:
 this.$ = ['subscription', $$[$0-3], $$[$0-1]]; 
break;
case 54:
 this.$ = ['identifier', $$[$0]]; 
break;
case 55: case 111:
 this.$ = []; 
break;
case 59:
 this.$ = ['str', parseString($$[$0])]; 
break;
case 60:
 this.$ = ['float', parseFloat($$[$0])]; 
break;
case 61: case 64:
 this.$ = ['int', parseInt($$[$0])]; 
break;
case 62:
 this.$ = ['int', parseInt($$[$0].slice(2), 2)]; 
break;
case 63:
 this.$ = ['int', parseInt($$[$0].slice(2), 8)]; 
break;
case 65:
 this.$ = ['bool', true]; 
break;
case 66:
 this.$ = ['bool', false]; 
break;
case 67:
 this.$ = ['NoneType', null]; 
break;
case 68:
 this.$ = ['list', $$[$0-1]]; 
break;
case 69:
 this.$ = ['list', []]; 
break;
case 70:
 this.$ = ['set', $$[$0-1]]; 
break;
case 71:
 this.$ = ['dict', $$[$0-1]]; 
break;
case 72:
 this.$ = ['dict', []]; 
break;
case 75:
 this.$ = [[$$[$0-2], $$[$0]]]; 
break;
case 76:
 this.$ = $$[$0-4]; this.$.push([$$[$0-2], $$[$0]]); 
break;
case 77: case 78:
 this.$ = ['assign', $$[$0-2], $$[$0]]; 
break;
case 79:
 this.$ = call(['primary', $$[$0-2]], '__iadd__', [$$[$0]]); 
break;
case 80:
 this.$ = call(['primary', $$[$0-2]], '__isub__', [$$[$0]]); 
break;
case 81:
 this.$ = call(['primary', $$[$0-2]], '__imul__', [$$[$0]]); 
break;
case 82:
 this.$ = call(['primary', $$[$0-2]], '__itruediv__', [$$[$0]]); 
break;
case 83:
 this.$ = call(['primary', $$[$0-2]], '__ifloordiv__', [$$[$0]]); 
break;
case 84:
 this.$ = call(['primary', $$[$0-2]], '__imod__', [$$[$0]]); 
break;
case 85:
 this.$ = call(['primary', $$[$0-2]], '__ipow__', [$$[$0]]); 
break;
case 86:
 this.$ = call(['primary', $$[$0-2]], '__ilshift__', [$$[$0]]); 
break;
case 87:
 this.$ = call(['primary', $$[$0-2]], '__irshift__', [$$[$0]]); 
break;
case 88:
 this.$ = call(['primary', $$[$0-2]], '__iand__', [$$[$0]]); 
break;
case 89:
 this.$ = call(['primary', $$[$0-2]], '__ixor__', [$$[$0]]); 
break;
case 90:
 this.$ = call(['primary', $$[$0-2]], '__ior__', [$$[$0]]); 
break;
case 91:
 this.$ = ['return', null]; 
break;
case 92:
 this.$ = ['return', $$[$0]]; 
break;
case 100:
 this.$ = ['if', ['truth', $$[$0-2]], $$[$0], [], []]; 
break;
case 101:
 this.$ = ['if', ['truth', $$[$0-5]], $$[$0-3], [], $$[$0]]; 
break;
case 102:
 this.$ = ['if', ['truth', $$[$0-3]], $$[$0-1], $$[$0], []]; 
break;
case 103:
 this.$ = ['if', ['truth', $$[$0-6]], $$[$0-4], $$[$0-3], $$[$0]]; 
break;
case 104:
 this.$ = [['elif', ['truth', $$[$0-2]], $$[$0]]]; 
break;
case 105:
 this.$ = $$[$0-4]; this.$.push(['elif', ['truth', $$[$0-2]], $$[$0]]); 
break;
case 106:
 this.$ = ['while', ['truth', $$[$0-2]], $$[$0], []]; 
break;
case 107:
 this.$ = ['while', ['truth', $$[$0-5]], $$[$0-3], $$[$0]]; 
break;
case 108:
 this.$ = ['for', $$[$0-4], $$[$0-2], $$[$0], []]; 
break;
case 109:
 this.$ = ['for', $$[$0-7], $$[$0-5], $$[$0-3], $$[$0]]; 
break;
case 110:
 this.$ = ['def', $$[$0-3], $$[$0-2], $$[$0]]; 
break;
case 115:
 this.$ = ['class', $$[$0-2], [], $$[$0]]; 
break;
case 116:
 this.$ = ['class', $$[$0-5], $$[$0-3], $$[$0]]; 
break;
}
},
table: [{3:1,4:2,5:3,6:4,9:5,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,22:$V4,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,88:7,89:8,90:9,91:10,92:11,98:$Vn,99:$Vo,100:$Vp,103:$Vq},{1:[3]},{1:[2,1],5:49,6:4,9:5,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,22:$V4,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,88:7,89:8,90:9,91:10,92:11,98:$Vn,99:$Vo,100:$Vp,103:$Vq},o($Vr,[2,2]),{7:[1,50],8:[1,51]},o($Vr,[2,6]),o($Vs,[2,7]),o($Vr,[2,93]),o($Vr,[2,94]),o($Vr,[2,95]),o($Vr,[2,96]),o($Vr,[2,97]),o($Vs,[2,9]),o($Vs,[2,10]),o($Vs,[2,11]),o($Vs,[2,12]),{16:52,24:53,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($Vs,[2,14]),o($Vs,[2,15]),o($Vs,[2,16]),{16:55,20:54,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:56,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:57,24:53,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{53:58,57:$Vb},{53:59,57:$Vb},o($Vs,[2,17]),o($Vt,$Vu,{74:$Vv,75:[1,61],76:[1,62],77:[1,63],78:[1,64],79:[1,65],80:[1,66],81:[1,67],82:[1,68],83:[1,69],84:[1,70],85:[1,71],86:[1,72]}),o($Vs,[2,91],{21:28,53:29,24:30,49:36,16:55,20:73,27:$V5,41:$V6,42:$V7,47:$V8,50:$V9,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl}),o($Vw,[2,18],{22:[1,74],25:$Vx,26:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($VT,[2,51]),o([7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,59,71,73],[2,20],{52:99,50:$VU,54:$VV,55:$VW}),{16:55,21:101,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:102,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:103,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:104,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($VT,[2,54]),o($VX,[2,48]),{16:55,20:105,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($VX,[2,59]),o($VX,[2,60]),o($VX,[2,61]),o($VX,[2,62]),o($VX,[2,63]),o($VX,[2,64]),o($VX,[2,65]),o($VX,[2,66]),o($VX,[2,67]),{16:55,20:108,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,56:[1,107],57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:106,70:$Vl},{16:55,20:112,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:109,70:$Vl,71:[1,111],72:110},o($Vr,[2,3]),o($Vr,[2,4]),{7:[1,113],10:114,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm},o($VY,$Vu,{7:$VZ,8:$VZ}),{50:$VU,52:99,54:$VV,55:$VW},{73:[1,115]},o($VX,$Vu),{73:[1,116]},o($VY,$Vu,{29:[1,117]}),{50:[1,119],101:118},{50:[1,121],73:[1,120]},{12:123,16:124,20:122,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:125,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:126,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:127,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:128,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:129,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:130,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:131,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:132,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:133,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:134,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:135,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:136,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($Vs,[2,92]),{16:55,21:137,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:138,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:139,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:140,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:141,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:142,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:143,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:144,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:145,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:146,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:147,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:148,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:149,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:150,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:151,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:152,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:153,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:154,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:155,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:156,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:157,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:158,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,21:159,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{53:160,57:$Vb},{16:55,20:161,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($VX,[2,50]),{16:55,20:164,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,51:[1,162],53:29,55:$Va,57:$Vb,58:163,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($V_,[2,23],{28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V$,[2,43],{48:$VS}),o($V$,[2,44],{48:$VS}),o($V$,[2,45],{48:$VS}),{51:[1,165]},{56:[1,166],59:$V01},o($VX,[2,69]),o([56,59],$V11),{59:$V01,71:[1,168]},{59:[1,170],71:[1,169]},o($VX,[2,72]),o($V21,$V11,{73:[1,171]}),o($Vr,[2,5]),o($Vs,[2,8]),{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:172},{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:175},{16:55,20:176,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{73:[1,177]},{51:[1,178],53:180,57:$Vb,102:179},{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:181},{16:55,20:164,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,58:182,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($Vs,[2,77]),o($Vs,[2,78]),o($Vt,$Vu,{74:$Vv}),o($Vs,[2,79]),o($Vs,[2,80]),o($Vs,[2,81]),o($Vs,[2,82]),o($Vs,[2,83]),o($Vs,[2,84]),o($Vs,[2,85]),o($Vs,[2,86]),o($Vs,[2,87]),o($Vs,[2,88]),o($Vs,[2,89]),o($Vs,[2,90]),{23:[1,183],25:$Vx,26:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS},o([7,8,22,23,25,51,56,59,71,73],[2,21],{26:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,22],{28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,24],{36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,25],{36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,26],{36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,27],{36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,28],{36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,29],{36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,30],{36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V_,[2,31],{36:$VH,37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o([7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,51,56,59,71,73],[2,32],{37:$VI,38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o([7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,37,51,56,59,71,73],[2,33],{38:$VJ,39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o([7,8,22,23,25,26,28,29,30,31,32,33,34,35,36,37,38,51,56,59,71,73],[2,34],{39:$VK,40:$VL,41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V41,[2,35],{41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V41,[2,36],{41:$VM,42:$VN,43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V51,[2,37],{43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V51,[2,38],{43:$VO,44:$VP,45:$VQ,46:$VR,48:$VS}),o($V$,[2,39],{48:$VS}),o($V$,[2,40],{48:$VS}),o($V$,[2,41],{48:$VS}),o($V$,[2,42],{48:$VS}),o($V$,[2,46],{48:$VS}),o($VT,[2,52]),{56:[1,184]},o($VX,[2,55]),{51:[1,185],59:$V61},o($V71,[2,57]),o($VX,[2,49]),o($VX,[2,68]),{16:55,20:187,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($VX,[2,70]),o($VX,[2,71]),{16:55,20:188,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{16:55,20:189,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($Vr,[2,100],{96:191,23:[1,190],97:[1,192]}),{7:[1,193],8:[1,194]},{94:[1,195]},o($Vr,[2,106],{23:[1,196]}),{73:[1,197]},{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:198},{73:[2,111]},{51:[1,199],59:[1,200]},o($V71,[2,113]),o($Vr,[2,115]),{51:[1,201],59:$V61},{16:55,20:202,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($VT,[2,53]),o($VX,[2,56]),{16:55,20:203,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o([56,59,71],[2,74]),{73:[1,204]},o($V21,[2,75]),{73:[1,205]},o($Vr,[2,102],{23:[1,206],97:[1,207]}),{16:55,20:208,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},o($V81,[2,98]),{10:114,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm},{4:209,5:3,6:4,9:5,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,22:$V4,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,88:7,89:8,90:9,91:10,92:11,98:$Vn,99:$Vo,100:$Vp,103:$Vq},{73:[1,210]},{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:211},o($Vr,[2,110]),{73:[2,112]},{53:212,57:$Vb},{73:[1,213]},o($Vw,[2,19]),o($V71,[2,58]),{16:55,20:214,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:215},{73:[1,216]},{16:55,20:217,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl},{73:[1,218]},{5:49,6:4,9:5,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,22:$V4,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,88:7,89:8,90:9,91:10,92:11,95:[1,219],98:$Vn,99:$Vo,100:$Vp,103:$Vq},{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:220},o($Vr,[2,108],{23:[1,221]}),o($V71,[2,114]),{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:222},o($V21,[2,76]),o($Vr,[2,101]),{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:223},{73:[1,224]},{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:225},o($V81,[2,99]),o($Vr,[2,107]),{73:[1,226]},o($Vr,[2,116]),o($Vr,[2,103]),{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:227},o($V81,[2,104]),{6:173,7:$V31,10:6,11:12,12:13,13:14,14:$V0,15:$V1,16:26,17:17,18:$V2,19:$V3,20:25,21:28,24:30,27:$V5,41:$V6,42:$V7,47:$V8,49:36,50:$V9,53:29,55:$Va,57:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,70:$Vl,87:$Vm,93:228},o($V81,[2,105]),o($Vr,[2,109])],
defaultActions: {178:[2,111],199:[2,112]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function parseString(str) {
    return str.slice(1, -1)
              .replace(/\\\n/g, '')
              .replace(/\\\\/g, '\\')
              .replace(/\\'/g, "'")
              .replace(/\\"/g, '"')
              .replace(/\\f/g, '\f')
              .replace(/\\n/g, '\n')
              .replace(/\\r/g, '\r')
              .replace(/\\t/g, '\t')
              .replace(/\\v/g, '\v');
}

function call(object, method, argv) {
    return ['call', ['primary', ['attributeref', object, ['identifier', method]]], argv];
}
exports.call = call;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 61;
break;
case 1:return 61;
break;
case 2:return 61;
break;
case 3:return 62;
break;
case 4:return 63;
break;
case 5:return 64;
break;
case 6:return 65;
break;
case 7:return 62;
break;
case 8:return 60;
break;
case 9:return 60;
break;
case 10:return 67;
break;
case 11:return 68;
break;
case 12:return 66;
break;
case 13:return 26;
break;
case 14:return 18;
break;
case 15:return 103;
break;
case 16:return 19;
break;
case 17:return 100;
break;
case 18:return 15;
break;
case 19:return 97;
break;
case 20:return 23;
break;
case 21:return 99;
break;
case 22:return 22;
break;
case 23:return 29;
break;
case 24:return 28;
break;
case 25:return 27;
break;
case 26:return 25;
break;
case 27:return 14;
break;
case 28:return 87;
break;
case 29:return 98;
break;
case 30:return 57;
break;
case 31:return 81;
break;
case 32:return 79;
break;
case 33:return 82;
break;
case 34:return 83;
break;
case 35:return 30;
break;
case 36:return 31;
break;
case 37:return 34;
break;
case 38:return 35;
break;
case 39:return 48;
break;
case 40:return 45;
break;
case 41:return 39;
break;
case 42:return 40;
break;
case 43:return 75;
break;
case 44:return 76;
break;
case 45:return 77;
break;
case 46:return 78;
break;
case 47:return 80;
break;
case 48:return 84;
break;
case 49:return 85;
break;
case 50:return 86;
break;
case 51:return 32;
break;
case 52:return 33;
break;
case 53:return 41;
break;
case 54:return 42;
break;
case 55:return 43;
break;
case 56:return 44;
break;
case 57:return 46;
break;
case 58:return 47;
break;
case 59:return 38;
break;
case 60:return 37;
break;
case 61:return 36;
break;
case 62:return 74;
break;
case 63:return 50;
break;
case 64:return 51;
break;
case 65:return 55;
break;
case 66:return 56;
break;
case 67:return 70;
break;
case 68:return 71;
break;
case 69:return 73;
break;
case 70:return 59;
break;
case 71:return 8;
break;
case 72:return 54;
break;
case 73:
            var tokens = ['NEWLINE'];
            while (indentStack.pop() !== '') {
                tokens.unshift('DEDENT');
            }
            indentStack.push('');
            return tokens;
        
break;
case 74:
                        var current = yy_.yytext.replace(/[\r\n]/g, '');
                        var last = indentStack[indentStack.length - 1];
                        if (current.startsWith(last)) {
                            if (current.length > last.length) {
                                indentStack.push(current);
                                return ['INDENT', 'NEWLINE'];
                            }
                        }
                        var tokens = ['NEWLINE'];
                        while (current.length < last.length) {
                            indentStack.pop();
                            last = indentStack[indentStack.length - 1];
                            tokens.unshift('DEDENT');
                        }
                        if (current === last) {
                            return tokens;
                        } else {
                            var line = yy_.yylineno + 1;
                            this.parseError('Indentation on line ' + line + ' does not match any level', {});
                        }
                    
break;
case 75:/* skip other whitespace */
break;
}
},
rules: [/^(?:([0-9])+([Ee][+-]?([0-9])+))/,/^(?:([0-9])+\.([0-9])*([Ee][+-]?([0-9])+)?)/,/^(?:([0-9])*\.([0-9])+([Ee][+-]?([0-9])+)?)/,/^(?:[1-9]([0-9])*)/,/^(?:0[Bb]([01])+)/,/^(?:0[Oo]([0-7])+)/,/^(?:0[Xx]([0-9A-Fa-f])+)/,/^(?:0+)/,/^(?:'(\\(.|\n)|[^\\'])*')/,/^(?:"(\\(.|\n)|[^\\"])*")/,/^(?:False\b)/,/^(?:None\b)/,/^(?:True\b)/,/^(?:and\b)/,/^(?:break\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:def\b)/,/^(?:del\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:not\b)/,/^(?:or\b)/,/^(?:pass\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:([A-Za-z_][A-Za-z0-9_]*))/,/^(?:\*\*=)/,/^(?:\/\/=)/,/^(?:<<=)/,/^(?:>>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:\*\*)/,/^(?:\/\/)/,/^(?:<<)/,/^(?:>>)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:<)/,/^(?:>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:~)/,/^(?:&)/,/^(?:\^)/,/^(?:\|)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:$)/,/^(?:(\n|\r\n?)([ \t])*)/,/^(?:([ \t])+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
var indentStack = [''];;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}